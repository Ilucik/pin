@page "/"
@using System.Diagnostics;
@using Microsoft.Maui.Graphics.Platform
@using pin.Infrastructure
@inject IJSRuntime JsRuntime

<section tooltip>
    <div>
        <select class="stat" @onchange="ChangeDirectory">

            <option value=""></option>
            @foreach (var d in directories)
            {
                <option value="@d"> @d </option>
            }

        </select>
        <div class="stat">@load</div>
        <div class="stat">кол-во: @source.Count</div>

        @if (!stopWatch.IsRunning)
        {
            <div class="stat">время: @stopWatch.Elapsed.TotalSeconds</div>
        }
        <button class="stat" @onclick="Reload"><img src="/reload.png"alt="reload"style="height:1rem"/></button>
    </div>
</section>
<section columns>
    <div class="columns-count">
        <button class="stat" @onclick="ColumnNuberIncrease">+</button>
        <button class="stat" @onclick="ColumnNumberDecrease">-</button>
    </div>
</section>
<ImageModal @ref="imageModal"/>

@if (source.Count > 0)
{
    
    <div class="pin-layout" style="height:@($"{MaxElement(layout)}px")" >
        @for (var i = 0; i < source.Count; i++)
        {
            var ci = i;
            var a = columnPercent * (ci % columnCount);
            <div @onclick="()=>ShowModal(ci)" class="item-img" style="width: @($"{maxWidth}px"); top:@($"{source[ci].top}px");left:@($"{source[ci].left}px")">
                <img src="data:image/png;base64, @source[ci].src64" width="100%" />
                <div class="item">
                </div>
            </div>
        }

    </div>
}


@code {
    private IJSObjectReference jsModule;
    private ImageModal imageModal;
    private List<PinElement> source = new();
    private const string HomeDirecory = @"C:/Users/sany1/Desktop/test";
    private string currentDirectory = "123";
    private IEnumerable<String> directories;
    private bool load;
    private bool modalVisible;
    private Stopwatch stopWatch = new();
    private int columnCount = 4;
    private int columnPercent => 100 / columnCount;
    private float maxWidth;
    private float verticalItemMargin = 10;
    private float horizontalItemMargin = 20;
    private float[] layout;
    int cursor;
    protected override async Task OnInitializedAsync()
    {
        directories = LoadDirectories();
        if (jsModule is null)
            jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/getlayoutwidth.js");
        var winSize = await jsModule.InvokeAsync<WindowDimensions>("getlayoutwidth");
        maxWidth = (winSize.Width - horizontalItemMargin * (columnCount - 1)) / columnCount;
        await Reload();
        await base.OnInitializedAsync();       
    }
    private IEnumerable<String> LoadDirectories()
    {
        return (new DirectoryInfo(HomeDirecory))
        .GetDirectories()
        .Select(e=>e.Name);
    }

    private async Task LoadImages(string path)
    {
        source = new();
        layout = new float[columnCount];
        load = false;
        stopWatch.Restart();
        var files = Directory.GetFiles(path);
        //var files = Directory.GetFiles(@"C:/rnd","*.jpg");
        for (var i = 0; i < files.Length; i++)
        {                    
            var img = await File.ReadAllBytesAsync(files[i]);
            float targetHeight;
            using (var ms = new MemoryStream(img))
            {
                var image  = PlatformImage.FromStream(ms);
                targetHeight = image.Height * maxWidth / image.Width;
            }
            var pl = IndexOfMin(layout);
            var left = (maxWidth + horizontalItemMargin) * pl;
            var top = layout[pl];
            layout[pl] += targetHeight + verticalItemMargin;
            var imageSource = Convert.ToBase64String(img);
            source.Add(new PinElement()
                {
                    left = left,
                    top = top,
                    src64 = imageSource
                });
        }

        load = true;
        stopWatch.Stop();
        StateHasChanged();
    }

    private void CursorNext()
    {
        cursor++;
        if (cursor < 0 || cursor >= source.Count)
            cursor = 0;
    }

    private void HideModal()
    {
        modalVisible = false;
    }

    private void ShowModal(int index)
    {
        // cursor = index;
        modalVisible = true;
        imageModal.ShowModal(source, index);
    }

    private async void ChangeDirectory(ChangeEventArgs e)
    {
        currentDirectory = e.Value?.ToString();
        await LoadImages(Path.Combine(HomeDirecory, currentDirectory));
    }

    private async Task Reload()
    {
        await LoadImages(Path.Combine(HomeDirecory, currentDirectory));
    }

    private void ColumnNuberIncrease()
    {
        if (columnCount < 6)
            columnCount++;
        StateHasChanged();
    }

    private void ColumnNumberDecrease()
    {
        if (columnCount > 0)
            columnCount--;
        StateHasChanged();
    }

    private float MaxElement(float[] src)
    {
        var max = float.MinValue;
        foreach(var e in src)
            if(e > max)
                max = e;
        return max;
    }

    private int IndexOfMin(float[] src)
    {
        var min = float.MaxValue;
        var ind = -1;
        for(var i = 0;i< src.Length; i++)
        {
            if(src[i] < min)
            {
                min = src[i];
                ind = i;
            }
        }

        return ind;
    }

    public class WindowDimensions
    {
        public int Width { get; set; }
    }
}