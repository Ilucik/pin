@page "/Images"
@using System.Diagnostics;
@using CommunityToolkit.Maui.Storage
@using Microsoft.Extensions.Configuration
@using Microsoft.Maui.Graphics.Platform
@using System.ComponentModel.DataAnnotations
@using pin.Components.Helpers
@using pin.Extensions
@using pin.Infrastructure
@using pin.Infrastructure.Models
@using pin.Services
@using pin.Infrastructure.Models.Settings
@inject IConfiguration config
@inject IJSRuntime _jsRuntime
@inject IProviderService _providerService
@if (settings is not null){
    <div class="help-bar" style=@(settings.SideBarToLeft?"left:0px;border-right: 1px solid #e9e9e9;":"right:0px;border-left: 1px solid #e9e9e9;")>
        <div>
            <button class="stat" @onclick="ShowSettings" title="settings" style="margin-bottom:20px;"><img src="/icons/setting.png" style="height:1rem;" /></button>
            <button class="stat" @onclick="OpenAdditionalPath" title="open additional path"><img src="/icons/folder.png" style="height:1rem" /></button>
        </div>
        <div>
            <button class="stat" onclick="window.scrollTo(0, 0);" title="up"><img src="/icons/arrow.png" style="height:1rem" /></button>
        </div>
    </div>
    @if (settingsVisible)
    {
        <SettingsPage CloseCallback="ShowSettings" UpdateCallback="StateChanged" Settings="@settings"></SettingsPage>
    }
    <div class="content-main" style=@(settings.SideBarToLeft?"padding-left:60px;padding-right:5px;":"padding-left:5px;padding-right:60px;")>
        <div class="content-tooltip">
            <span>
                @if(directories is not null){
                    <select class="stat" @bind=currentDirectory @bind:after=InitLoad>

                        <option value=""></option>
                        @foreach (var d in directories)
                        {
                            <option value="@d"> @d </option>
                        }

                    </select>
                }
                @* <div class="stat">@load</div> *@
                @if (source.Count > 0)
                {
                    <span class="stat">images: @source.Count</span>
                    <span class="stat">@Double.Round(stopWatch.Elapsed.TotalSeconds,3)</span>
                    <button class="stat" @onclick="Reload"><img src="/icons/reload.png" style="height:1rem" /></button>
                }
            </span>    
            <span class="columns-count">
                <select class="stat" @bind=columnCount @bind:after=InitLoad>
                    @for(var i = 1; i < 8; i++)
                    {
                        <option value="@i"> @i </option>
                    }

                </select>
            </span>
        </div>

        <ImageModal @ref="imageModal"/>

        

        @if (source.Count > 0)
        {
            <div class="pin-layout" style="height:@($"{layout.Max()}px")" >
                @for (var i = 0; i < source.Count; i++)
                {
                    var ci = i;
                    <div @onclick="()=>ShowModal(ci)" class="item-img" style="width: @($"{source[ci].Width}px"); top:@($"{source[ci].Top}px");left:@($"{source[ci].Left}px")">
                        <img src="data:image/png;base64, @source[ci].Src64" width="100%" />
                        <div class="item">
                        </div>
                    </div>
                }

                @if (!pagination.isEnded)
                {
                    <IntersectionObserver OnIntersectionCallback="LoadMore" PositionTop="@ioPos"></IntersectionObserver>
                }
            </div>   
            @* <button @onclick="LoadMore">Загрузить ещё</button> *@
        }

        @if (!load)
        {
            <div class="loader-container">
                <div class="loader"></div>
            </div>
        }

    </div>
}

@code {
    private IJSObjectReference jsModule;
    private ImageModal imageModal;
    private List<PinImage> source = new();
    private Settings settings;
    private string currentDirectory;
    private string currentPath;
    private IEnumerable<String> directories { get; set; }
    private bool load = true;
    private bool modalVisible;
    private bool settingsVisible;
    private Stopwatch stopWatch = new();
    private WindowDimensions ws;
    private int ioPos = 0;
    private int maxWidth;
    private int verticalItemMargin = 10;
    private int horizontalItemMargin = 20;
    private int columnCount = 5;
    private int columnMin = 1;
    private int columnMax = 7;
    private int[] layout;
    private Pagination pagination = new(0, 20);

    protected override async Task OnInitializedAsync()
    {     
        settings = config.GetSection(nameof(Settings)).Get<Settings>();
        currentDirectory = settings.DirectorySetting.HomeSubdirectory;
        directories = (new DirectoryInfo(settings.DirectorySetting.HomeDirectory))
            .GetDirectories()
            .Select(e => e.Name);
        if (jsModule is null)
            jsModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/getlayoutwidth.js");
        ws = await jsModule.InvokeAsync<WindowDimensions>("getlayoutwidth");
        if (currentDirectory is not null)
        {
            await InitLoad();
        }
        await base.OnInitializedAsync();       
    }

    private async Task InitLoad()
    {
        currentPath = Path.Combine(settings.DirectorySetting.HomeDirectory, currentDirectory);
        await Reload();
    }

    private IEnumerable<PinImage> Resize(IEnumerable<PinImage> images)
    {
        if (columnCount == 1)
            Resize1Column(images);
        else
            ResizeMore(images);
        return images;
    }

    private IEnumerable<PinImage> ResizeMore(IEnumerable<PinImage> images)
    {
        maxWidth = (ws.Width - 15 - horizontalItemMargin * (columnCount - 1)) / columnCount;
        foreach (var image in images)
        {
            image.Width = maxWidth;
            var targetHeight = Convert.ToInt32(image.SourceHeight * maxWidth / image.SourceWidth);            
            var pl = layout.IndexOfMin();
            image.Left = Convert.ToInt32((maxWidth + horizontalItemMargin) * pl);
            image.Top = Convert.ToInt32(layout[pl]);
            layout[pl] += targetHeight + verticalItemMargin;
        }

        return images;
    }

    private IEnumerable<PinImage> Resize1Column(IEnumerable<PinImage> images)
    {
        foreach (var image in images)
        {
            image.Width = Convert.ToInt32(ws.Width * 0.6);
            var targetHeight = Convert.ToInt32(image.SourceHeight * image.Width / image.SourceWidth);
            var pl = layout.IndexOfMin();
            image.Left = Convert.ToInt32(ws.Width * 0.2);
            image.Top = Convert.ToInt32(layout[pl]);
            layout[pl] += targetHeight + verticalItemMargin;
        }

        return images;
    }

    private async Task Reload()
    {
        load = false;
        source = new();
        StateHasChanged();
        stopWatch.Restart();
        layout = new int[columnCount];
        pagination = new(0, 20);
        var a = await _providerService.GetImages(currentPath, pagination);
        source = Resize(a).ToList();
        ioPos = layout[0];
        pagination.Skip += pagination.Take;
        load = true;
        stopWatch.Stop();
        StateHasChanged();
    }

    private async Task LoadMore()
    {
        load = false;
        var lastRowHeight = layout[0];
        var a = await _providerService.GetImages(currentPath, pagination);
        source.AddRange(Resize(a));
        ioPos = (layout[0] - lastRowHeight) / 2 + lastRowHeight;
        pagination.Skip += pagination.Take;
        load = true;
        StateHasChanged();
    }

    private void ShowModal(int index)
    {
        // cursor = index;
        modalVisible = true;
        imageModal.ShowModal(source, index);
    }

    private void ShowSettings()
    {
        settingsVisible = !settingsVisible;
    }

    private async Task ChangeDirectory(ChangeEventArgs e)
    {
        currentDirectory = e.Value?.ToString();
        currentPath = Path.Combine(settings.DirectorySetting.HomeDirectory, currentDirectory);
        await Reload();
    }

    private async Task ColumnNuberChange()
    {
        layout = new int[columnCount];
        source =  Resize(source).ToList();
        ioPos = layout[0];
        StateHasChanged();
    }

    private async Task OpenAdditionalPath()
    {
        var folder = await FolderPicker.PickAsync(default);
        if (folder.IsSuccessful)
        {
            currentDirectory = "";
            currentPath = folder.Folder.Path;
            await Reload(); 
        }
    }

    private void StateChanged()
    {
        StateHasChanged();
    }

    public class WindowDimensions
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

}