@using System.Diagnostics;
@using Microsoft.Maui.Graphics.Platform
@using System.ComponentModel.DataAnnotations
@using pin.Infrastructure
@using pin.Services
@inject IJSRuntime _jsRuntime
@inject IProviderService _providerService

<section tooltip>
    <div>
        @if(directories is not null){
            <select class="stat" @onchange ="ChangeDirectory">

                <option value=""></option>
                @foreach (var d in directories)
                {
                    <option value="@d"> @d </option>
                }

            </select>
        }
        @* <div class="stat">@load</div> *@
        <div class="stat">кол-во: @source.Count</div>

        @if (!stopWatch.IsRunning)
        {
            <div class="stat">время: @stopWatch.Elapsed.TotalSeconds</div>
        }
        <button class="stat" @onclick="Reload"><img src="/reload.png"alt="reload"style="height:1rem"/></button>
    </div>
</section>
<section columns>
    <div class="columns-count">
        <button class="stat" @onclick="ColumnNuberIncrease">+</button>
        <button class="stat" @onclick="ColumnNumberDecrease">-</button>
    </div>
</section>
<ImageModal @ref="imageModal"/>

@if(!load){
    <div class="loader-container">
        <div class="loader"></div>
    </div>
}

@if (load && source.Count > 0)
{
    
    <div class="pin-layout" style="height:@($"{MaxElement(layout)}px")" >
        @for (var i = 0; i < source.Count; i++)
        {
            var ci = i;
            <div @onclick="()=>ShowModal(ci)" class="item-img" style="width: @($"{maxWidth}px"); top:@($"{source[ci].Top}px");left:@($"{source[ci].Left}px")">
                <img src="data:image/png;base64, @source[ci].Src64" width="100%" />
                <div class="item">
                </div>
            </div>
        }

    </div>
}


@code {
    private IJSObjectReference jsModule;
    private ImageModal imageModal;
    private List<PinImage> source = new();
    [Parameter]
    [Required]
    public string homeDirecory { get; set; }
    [Parameter]
    [Required]
    public string currentDirectory { get; set; }
    [Parameter]
    [Required]
    public IEnumerable<String> directories { get; set; }
    private bool load;
    private bool modalVisible;
    private Stopwatch stopWatch = new();
    private int columnCount = 5;
    private WindowDimensions ws;
    private int maxWidth;
    private int verticalItemMargin = 10;
    private int horizontalItemMargin = 20;
    private int columnMin = 3;
    private int columnMax = 6;
    private int[] layout;

    protected override async Task OnInitializedAsync()
    {      
        if (jsModule is null)
            jsModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/getlayoutwidth.js");
        ws = await jsModule.InvokeAsync<WindowDimensions>("getlayoutwidth");
        await Reload();
        await base.OnInitializedAsync();       
    }

    private IEnumerable<String> LoadDirectories()
    {
        return (new DirectoryInfo(homeDirecory))
        .GetDirectories()
        .Select(e=>e.Name);
    }

    private async IAsyncEnumerable<PinImage> Resize(IAsyncEnumerable<PinImage> images)
    {
        maxWidth = (ws.Width - horizontalItemMargin * (columnCount - 1)) / columnCount;
        layout = new int[columnCount];
        await foreach (var image in images)
        {
            var targetHeight = Convert.ToInt32(image.Height * maxWidth / image.Width);            
            var pl = IndexOfMin(layout);
            image.Left = Convert.ToInt32((maxWidth + horizontalItemMargin) * pl);
            image.Top = Convert.ToInt32(layout[pl]);
            layout[pl] += targetHeight + verticalItemMargin;
            yield return image;
        }
    }

    private async Task Reload()
    {
        load = false;
        stopWatch.Restart();
        var a = _providerService.GetImages(Path.Combine(homeDirecory, currentDirectory));
        source = await Resize(a).ToListAsync();
        load = true;
        stopWatch.Stop();
        StateHasChanged();
    }

    private void ShowModal(int index)
    {
        // cursor = index;
        modalVisible = true;
        imageModal.ShowModal(source, index);
    }

    private async Task ChangeDirectory(ChangeEventArgs e)
    {
        currentDirectory = e.Value?.ToString();
        await Reload();
    }

    private async Task ColumnNuberIncrease()
    {
        if (columnCount < columnMax)
            columnCount++;
        source = await Resize(source.ToAsyncEnumerable()).ToListAsync();
        StateHasChanged();
    }

    private async Task ColumnNumberDecrease()
    {
        if (columnCount > columnMin)
            columnCount--;
        source = await Resize(source.ToAsyncEnumerable()).ToListAsync();
        StateHasChanged();
    }

    private float MaxElement(int[] src)
    {
        var max = int.MinValue;
        foreach(var e in src)
            if(e > max)
                max = e;
        return max;
    }

    private int IndexOfMin(int[] src)
    {
        var min = int.MaxValue;
        var ind = -1;
        for(var i = 0;i< src.Length; i++)
        {
            if(src[i] < min)
            {
                min = src[i];
                ind = i;
            }
        }

        return ind;
    }

    public class WindowDimensions
    {
        public int Width { get; set; }
    }
}