@using System.Diagnostics;
@using Microsoft.Maui.Graphics.Platform
@using System.ComponentModel.DataAnnotations
@using pin.Components.Helpers
@using pin.Extensions
@using pin.Infrastructure
@using pin.Infrastructure.Models
@using pin.Services
@inject IJSRuntime _jsRuntime
@inject IProviderService _providerService

<section tooltip>
    <div>
        @if(directories is not null){
            <select class="stat" @bind=currentDirectory @bind:after=Reload>

                <option value=""></option>
                @foreach (var d in directories)
                {
                    <option value="@d"> @d </option>
                }

            </select>
        }
        @* <div class="stat">@load</div> *@
        <div class="stat">кол-во: @source.Count</div>
        <button class="stat" @onclick="Reload"><img src="/reload.png"alt="reload"style="height:1rem"/></button>
    </div>
</section>
<section columns>
    <div class="columns-count">
        <button class="stat" @onclick="ColumnNuberIncrease">+</button>
        <button class="stat" @onclick="ColumnNumberDecrease">-</button>
    </div>
</section>
<ImageModal @ref="imageModal"/>

@if(!load){
    <div class="loader-container">
        <div class="loader"></div>
    </div>
}

@if (load && source.Count > 0)
{
    
    <div class="pin-layout" style="height:@($"{layout.Max()}px")" >
        @for (var i = 0; i < source.Count; i++)
        {
            var ci = i;
            <div @onclick="()=>ShowModal(ci)" class="item-img" style="width: @($"{maxWidth}px"); top:@($"{source[ci].Top}px");left:@($"{source[ci].Left}px")">
                <img src="data:image/png;base64, @source[ci].Src64" width="100%" />
                <div class="item">
                </div>
            </div>
        }

        @if (!pagination.isEnded)
        {
            <IntersectionObserver OnIntersectionCallback="LoadMore" PositionTop="@ioPos"></IntersectionObserver>
        }
    </div>   
    @* <button @onclick="LoadMore">Загрузить ещё</button> *@
}


@code {
    private IJSObjectReference jsModule;
    private ImageModal imageModal;
    private List<PinImage> source = new();
    [Parameter]
    [Required]
    public string homeDirecory { get; set; }
    [Parameter]
    [Required]
    public string currentDirectory { get; set; }
    [Parameter]
    [Required]
    public IEnumerable<String> directories { get; set; }
    private bool load = true;
    private bool modalVisible;
    private Stopwatch stopWatch = new();
    private int columnCount = 5;
    private WindowDimensions ws;
    private int ioPos = 0;
    private int maxWidth;
    private int verticalItemMargin = 10;
    private int horizontalItemMargin = 20;
    private int columnMin = 3;
    private int columnMax = 6;
    private int[] layout;
    private Pagination pagination = new(0, 20);

    protected override async Task OnInitializedAsync()
    {      
        if (jsModule is null)
            jsModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/getlayoutwidth.js");
        ws = await jsModule.InvokeAsync<WindowDimensions>("getlayoutwidth");
        if(currentDirectory is not null)
            await Reload();
        await base.OnInitializedAsync();       
    }

    private IEnumerable<String> LoadDirectories()
    {
        return (new DirectoryInfo(homeDirecory))
        .GetDirectories()
        .Select(e=>e.Name);
    }

    private async IAsyncEnumerable<PinImage> Resize(IAsyncEnumerable<PinImage> images)
    {
        maxWidth = (ws.Width - horizontalItemMargin * (columnCount - 1)) / columnCount;
        await foreach (var image in images)
        {
            var targetHeight = Convert.ToInt32(image.Height * maxWidth / image.Width);            
            var pl = layout.IndexOfMin();
            image.Left = Convert.ToInt32((maxWidth + horizontalItemMargin) * pl);
            image.Top = Convert.ToInt32(layout[pl]);
            layout[pl] += targetHeight + verticalItemMargin;
            yield return image;
        }
    }

    private async Task Reload()
    {
        load = false;
        StateHasChanged();
        stopWatch.Restart();
        layout = new int[columnCount];
        pagination = new(0, 20);
        var a = _providerService.GetImages(Path.Combine(homeDirecory, currentDirectory), pagination);
        source = await Resize(a).ToListAsync();
        ioPos = 0;
        pagination.Skip += pagination.Take;
        load = true;
        stopWatch.Stop();
        StateHasChanged();
    }

    private async Task LoadMore()
    {       
        var lastRowHeight = layout[0];
        var a = _providerService.GetImages(Path.Combine(homeDirecory, currentDirectory), pagination);        
        await foreach (var e in Resize(a))
            source.Add(e);
        ioPos = lastRowHeight;
        pagination.Skip += pagination.Take;
        StateHasChanged();
    }

    private void ShowModal(int index)
    {
        // cursor = index;
        modalVisible = true;
        imageModal.ShowModal(source, index);
    }

    private async Task ChangeDirectory(ChangeEventArgs e)
    {
        currentDirectory = e.Value?.ToString();
        await Reload();
    }

    private async Task ColumnNuberIncrease()
    {
        if (columnCount < columnMax)
            columnCount++;
        layout = new int[columnCount];
        source = await Resize(source.ToAsyncEnumerable()).ToListAsync();
        StateHasChanged();
    }

    private async Task ColumnNumberDecrease()
    {
        if (columnCount > columnMin)
            columnCount--;
        layout = new int[columnCount];
        source = await Resize(source.ToAsyncEnumerable()).ToListAsync();
        StateHasChanged();
    }

    public class WindowDimensions
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}