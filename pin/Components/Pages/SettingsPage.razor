@using Microsoft.Extensions.Configuration
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Options
@using pin.Infrastructure;
@using pin.Infrastructure.Models.Settings
@inject IWritableOptions<Settings> writableConfig
@inject NavigationManager Navigation
<div @onclick="CloseCallback" class="settings-container">
    <div @onclick:stopPropagation="true" class="settings-page">
        <p>Home directory: @Settings.DirectorySetting.HomeDirectory</p>
        <SelectHomeDirectory OnClickCallback="(e)=>HomeDirectoryUpdate(e)" />
        <span>Start directory:  </span>
        <select class="stat" @bind=Settings.DirectorySetting.HomeSubdirectory @bind:after=SubDirectoryUpdate>
            <option value=""></option>
            @foreach (var d in directories)
            {
                <option value="@d"> @d </option>
            }

        </select>
        <div>
            <InputRadioGroup ValueChanged=SideBarToLeftUpdate TValue="bool" ValueExpression="()=>Settings.SideBarToLeft" Value="Settings.SideBarToLeft">
                    <InputRadio Value="true"/> <label>left</label>
                    <InputRadio Value="false"/> <label>right </label>
            </InputRadioGroup>
        </div>
    </div>
</div>


@code {
    [Parameter]
    [Required]
    public Settings Settings{ get; set; }
    [Parameter]
    [Required]
    public EventCallback CloseCallback{ get; set; }
    [Parameter]
    [Required]
    public EventCallback UpdateCallback { get; set; }
    private IEnumerable<String> directories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        directories = (new DirectoryInfo(Settings.DirectorySetting.HomeDirectory))
           .GetDirectories()
           .Select(e => e.Name);
        await base.OnInitializedAsync();
    }

    private void HomeDirectoryUpdate(string v)
    {
        Settings.DirectorySetting.HomeDirectory = v;
        writableConfig.Update(e =>
        {
            e.DirectorySetting.HomeDirectory = Settings.DirectorySetting.HomeDirectory;
        });
    }

    private void SubDirectoryUpdate()
    {
        writableConfig.Update(e =>
        {
            e.DirectorySetting.HomeSubdirectory = Settings.DirectorySetting.HomeSubdirectory;
        });
    }

    private async Task SideBarToLeftUpdate(bool v)
    {
        Settings.SideBarToLeft = v;
        await UpdateCallback.InvokeAsync();
        writableConfig.Update(e =>
        {
            e.SideBarToLeft =v;
        });
    }
}
